window.storyFormat({"name":"ChatbookViewer","description":"An interactive chat viewer for Chatbook","author":"Jakob Heuser","image":"icon.svg","url":"github:aibexhq/chatbook","version":"0.1.1","proofing":false,"source":"<!DOCTYPE html>\n<html>\n  <head>\n    <title>\n      {{STORY_NAME}}\n    </title>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"description\" content=\"\" />\n    <meta name=\"author\" content=\"\" />\n    <link rel=\"icon\" href=\"favicon.ico\" />\n\n    <!-- Bootstrap core CSS -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\n      integrity=\"sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB\"\n      crossorigin=\"anonymous\"\n    />\n\n    <style>/* Variables */\n\n:root {\n  --navbar-height: 56px;\n  --user-response-panel-height: 110px;\n  --bg-color: #c7bdb5; /*global chat bg color*/\n  --user-color: #417505; /*user name & placeholder avatar bg*/\n  --speaker-color: #888; /*default color for speaker name & placeholder avatar bg*/\n  --sidebar-bg-color: #fff;\n  --navbar-bg-color: #fff;\n  --passage-bg-color: #fff;\n  --passage-text-color: #000;\n}\n\n/* Atomic Utilities */\n\n.bg-color {\n  background-color: var(--bg-color);\n}\n\n.minh-full {\n  min-height: calc(\n    100vh - var(--navbar-height) - var(--user-response-panel-height) - 17px -\n      5px\n  );\n}\n\n.ml--3 {\n  margin-left: -1rem !important;\n}\n\n@media (min-width: 992px) {\n  .w-lg-auto {\n    width: auto !important;\n  }\n}\n\n/* General */\n\nhtml,\nbody {\n  overflow-x: hidden; /* Prevent scroll on narrow devices */\n  position: relative;\n  min-height: 100%;\n}\n\nbody {\n  padding-top: var(--navbar-height);\n  margin-bottom: calc(\n    var(--user-response-panel-height) + 18px + 5px\n  ); /* + height of hint + hr */\n}\n\n/* Offcanvas sidebar */\n\n@media (max-width: 991.98px) {\n  .offcanvas-collapse {\n    z-index: 1100;\n    position: fixed;\n    top: var(--navbar-height); /* Height of navbar */\n    bottom: 0;\n    left: 100%;\n    width: 100%;\n    padding-right: 1rem;\n    padding-left: 1rem;\n    overflow-y: auto;\n    visibility: hidden;\n    background-color: var(--sidebar-bg-color);\n    transition-timing-function: ease-in-out;\n    transition-duration: 0.3s;\n    transition-property: left, visibility;\n  }\n  .offcanvas-collapse.open {\n    left: 0;\n    visibility: visible;\n  }\n}\n\n/* Nav */\n\nnav.navbar {\n  height: var(--navbar-height);\n  background-color: var(--navbar-bg-color);\n  padding: 0.5rem 15px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\nnav .nav-title {\n  font-size: 1.5rem;\n  line-height: 40px;\n  margin: 0 auto;\n}\n\nnav .nav-icon {\n  width: 35px;\n}\n\n/* Chat Panel */\n\n.chat-panel {\n  padding-top: 15px;\n}\n\n.chat-passage-wrapper {\n  position: relative;\n  margin: 0.5rem 0;\n}\n\n.chat-passage-wrapper[data-speaker=\"you\"] {\n  text-align: right;\n}\n.chat-passage-wrapper[data-speaker=\"you\"] .chat-passage:before {\n  text-align: right;\n  color: var(--user-color);\n}\n\n.chat-passage {\n  display: inline-block;\n  padding: 0.25rem 0.5rem;\n  margin-left: 35px;\n  background-color: var(--passage-bg-color);\n  max-width: calc(100% - 80px);\n  text-align: left;\n}\n@media (min-width: 576px) {\n  .chat-passage {\n    max-width: calc(100% - 100px);\n  }\n}\n@media (min-width: 768px) {\n  .chat-passage {\n    max-width: calc(100% - 80px);\n  }\n}\n@media (min-width: 992px) {\n  .chat-passage {\n    max-width: calc(100% - 100px);\n  }\n}\n\n.chat-passage:before {\n  content: attr(data-speaker);\n  display: block;\n  font-size: 0.75rem;\n  text-transform: capitalize;\n  color: var(--speaker-color);\n}\n\n.chat-passage p {\n  margin: 0;\n}\n\n.chat-passage img {\n  max-width: 100%;\n  max-height: calc(100vh - 2 * var(--user-response-panel-height));\n  padding: 0.25rem 0;\n}\n.chat-passage iframe {\n  max-width: 100%;\n  max-height: calc(100vh - 2 * var(--user-response-panel-height));\n}\n\n.chat-passage figure {\n  margin-bottom: 0.25rem;\n  font-size: 0.75rem;\n}\n\n/* User Response Panel */\n\n.user-response-panel {\n  padding-right: 15px;\n  padding-left: 15px;\n}\n@media (min-width: 992px) {\n  .user-response-panel {\n    max-width: calc(\n      100% / (12 / 6)\n    ); /* 100% / (12/[col width of chat-panel]) */\n    margin: 0 auto;\n  }\n}\n\n.user-response-panel hr {\n  margin: 0;\n  border-top: 5px solid white;\n}\n\n.user-response-hint {\n  font-style: italic;\n  font-size: 0.75rem;\n  text-align: center;\n  height: 18px;\n}\n@media (max-width: 379.98px) {\n  .user-response-hint {\n    font-size: 0.6rem;\n    height: 14px;\n  }\n  body {\n    margin-bottom: calc(\n      var(--user-response-panel-height) + 14px + 5px\n    ); /* + height of hint + hr */\n  }\n  .minh-full {\n    min-height: calc(\n      100vh - var(--navbar-height) - var(--user-response-panel-height) - 14px -\n        5px\n    );\n  }\n}\n@media (max-width: 319.98px) {\n  .user-response-hint {\n    font-size: 0.5rem;\n    height: 12px;\n  }\n  body {\n    margin-bottom: calc(\n      var(--user-response-panel-height) + 12px + 5px\n    ); /* + height of hint + hr */\n  }\n  .minh-full {\n    min-height: calc(\n      100vh - var(--navbar-height) - var(--user-response-panel-height) - 12px -\n        5px\n    );\n  }\n}\n\n.user-reponse-wrapper {\n  height: var(--user-response-panel-height);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.user-response-panel .user-response {\n  display: inline-block;\n  padding: 0.5rem;\n  margin: 0.25rem;\n  background-color: var(--passage-bg-color);\n  color: var(--passage-text-color);\n  border-top: 2px solid transparent;\n  transition: border-color 0.15s ease-in;\n}\n.user-response-panel .user-response:hover {\n  text-decoration: none;\n  border-color: var(--user-color);\n}\n\n/* Passage Avatars */\n\n.chat-passage-wrapper:before {\n  margin-right: 5px;\n  position: absolute;\n  vertical-align: top;\n  content: \"\";\n  width: 30px;\n  height: 30px;\n  background-size: 30px 30px;\n  border-radius: 15px;\n  background-color: var(--speaker-color);\n}\n.chat-passage-wrapper[data-speaker=\"you\"]:before {\n  display: none;\n}\n.chat-passage-wrapper[data-speaker=\"you\"]:after {\n  margin-left: -30px;\n  position: absolute;\n  vertical-align: top;\n  content: \"\";\n  width: 30px;\n  height: 30px;\n  background-size: 30px 30px;\n  border-radius: 15px;\n  background-color: var(--user-color);\n}\n.chat-passage[data-speaker=\"you\"] {\n  margin-left: 0;\n  margin-right: 35px;\n}\n\n/* Typing Animation */\n\ndiv.wave {\n  position: relative;\n  text-align: center;\n  margin-left: auto;\n  margin-right: auto;\n}\ndiv.wave .dot {\n  display: inline-block;\n  width: 6px;\n  height: 6px;\n  border-radius: 50%;\n  margin-right: 2px;\n  background: var(--passage-text-color);\n  animation: wave 1.2s ease-in-out infinite;\n}\ndiv.wave .dot:nth-child(2) {\n  animation-delay: 0.1s;\n}\n\ndiv.wave .dot:nth-child(3) {\n  animation-delay: 0.2s;\n}\n\n@keyframes wave {\n  0%,\n  50%,\n  100% {\n    transform: initial;\n  }\n\n  25% {\n    transform: translateY(-15px);\n  }\n}\n\n/* Modal */\n\n.modal-dialog {\n  max-width: 420px;\n}\n\n/* \n * counter extra padding-right added by BS4 modal\n * https://stackoverflow.com/questions/32862394/bootstrap-modals-keep-adding-padding-right-to-body-after-closed\n */\nbody.modal-open {\n  padding-right: 0 !important;\n}\nbody.modal-open .user-response-panel {\n  padding-right: 15px !important;\n}\nbody.modal-open nav.navbar {\n  padding-right: 15px !important;\n}\n</style>\n  </head>\n  <body class=\"bg-white\">\n    <nav class=\"navbar navbar-expand-lg fixed-top\">\n      <h1 id=\"ptitle\" class=\"nav-title\">{{STORY_NAME}}</h1>\n    </nav>\n\n    <main role=\"main\" class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"left-sidebar col-lg d-none d-lg-block\">\n          <div\n            id=\"left-sidebar-container\"\n            class=\"content-container position-fixed mt-3 mt-lg-5 m-lg-4\"\n          ></div>\n        </div>\n        <div class=\"chat-panel col-lg-6 minh-full bg-color\">\n          <div id=\"phistory\" class=\"history chat-history\"></div>\n          <div id=\"passage\" class=\"active\"></div>\n          <div id=\"animation-container\">\n            <div class=\"chat-passage-wrapper\">\n              <div class=\"chat-passage\">\n                <div class=\"wave\">\n                  <span class=\"dot\"></span>\n                  <span class=\"dot\"></span>\n                  <span class=\"dot\"></span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"user-response-panel fixed-bottom bg-color\">\n            <hr />\n            <div\n              id=\"user-response-hint\"\n              class=\"user-response-hint content-container\"\n            ></div>\n            <div id=\"user-response-panel\" class=\"user-reponse-wrapper\"></div>\n          </div>\n        </div>\n        <div class=\"right-sidebar col-lg offcanvas-collapse\">\n          <div class=\"position-fixed ml--3 w-100 w-lg-auto h-100\">\n            <div\n              id=\"right-sidebar-container\"\n              class=\"content-container m-3 m-sm-5 m-lg-3 mt-lg-5 m-xl-5 mt-xl-5\"\n            ></div>\n          </div>\n        </div>\n      </div>\n    </main>\n    {{STORY_DATA}} <script>(function (factory) {\n  typeof define === 'function' && define.amd ? define(factory) :\n  factory();\n}(function () { 'use strict';\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var classCallCheck = _classCallCheck;\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  var defineProperty = _defineProperty;\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    }\n  }\n\n  var arrayWithoutHoles = _arrayWithoutHoles;\n\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  var iterableToArray = _iterableToArray;\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n\n  var nonIterableSpread = _nonIterableSpread;\n\n  function _toConsumableArray(arr) {\n    return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n  }\n\n  var toConsumableArray = _toConsumableArray;\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  function createCommonjsModule(fn, module) {\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n  }\n\n  var runtime_1 = createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var runtime = (function (exports) {\n\n    var Op = Object.prototype;\n    var hasOwn = Op.hasOwnProperty;\n    var undefined$1; // More compressible than void 0.\n    var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n    var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n    var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n    var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n    function wrap(innerFn, outerFn, self, tryLocsList) {\n      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n      var generator = Object.create(protoGenerator.prototype);\n      var context = new Context(tryLocsList || []);\n\n      // The ._invoke method unifies the implementations of the .next,\n      // .throw, and .return methods.\n      generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n      return generator;\n    }\n    exports.wrap = wrap;\n\n    // Try/catch helper to minimize deoptimizations. Returns a completion\n    // record like context.tryEntries[i].completion. This interface could\n    // have been (and was previously) designed to take a closure to be\n    // invoked without arguments, but in all the cases we care about we\n    // already have an existing method we want to call, so there's no need\n    // to create a new function object. We can even get away with assuming\n    // the method takes exactly one argument, since that happens to be true\n    // in every case, so we don't have to touch the arguments object. The\n    // only additional allocation required is the completion record, which\n    // has a stable shape and so hopefully should be cheap to allocate.\n    function tryCatch(fn, obj, arg) {\n      try {\n        return { type: \"normal\", arg: fn.call(obj, arg) };\n      } catch (err) {\n        return { type: \"throw\", arg: err };\n      }\n    }\n\n    var GenStateSuspendedStart = \"suspendedStart\";\n    var GenStateSuspendedYield = \"suspendedYield\";\n    var GenStateExecuting = \"executing\";\n    var GenStateCompleted = \"completed\";\n\n    // Returning this object from the innerFn has the same effect as\n    // breaking out of the dispatch switch statement.\n    var ContinueSentinel = {};\n\n    // Dummy constructor functions that we use as the .constructor and\n    // .constructor.prototype properties for functions that return Generator\n    // objects. For full spec compliance, you may wish to configure your\n    // minifier not to mangle the names of these two functions.\n    function Generator() {}\n    function GeneratorFunction() {}\n    function GeneratorFunctionPrototype() {}\n\n    // This is a polyfill for %IteratorPrototype% for environments that\n    // don't natively support it.\n    var IteratorPrototype = {};\n    IteratorPrototype[iteratorSymbol] = function () {\n      return this;\n    };\n\n    var getProto = Object.getPrototypeOf;\n    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n    if (NativeIteratorPrototype &&\n        NativeIteratorPrototype !== Op &&\n        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n      // This environment has a native %IteratorPrototype%; use it instead\n      // of the polyfill.\n      IteratorPrototype = NativeIteratorPrototype;\n    }\n\n    var Gp = GeneratorFunctionPrototype.prototype =\n      Generator.prototype = Object.create(IteratorPrototype);\n    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n    GeneratorFunctionPrototype.constructor = GeneratorFunction;\n    GeneratorFunctionPrototype[toStringTagSymbol] =\n      GeneratorFunction.displayName = \"GeneratorFunction\";\n\n    // Helper for defining the .next, .throw, and .return methods of the\n    // Iterator interface in terms of a single ._invoke method.\n    function defineIteratorMethods(prototype) {\n      [\"next\", \"throw\", \"return\"].forEach(function(method) {\n        prototype[method] = function(arg) {\n          return this._invoke(method, arg);\n        };\n      });\n    }\n\n    exports.isGeneratorFunction = function(genFun) {\n      var ctor = typeof genFun === \"function\" && genFun.constructor;\n      return ctor\n        ? ctor === GeneratorFunction ||\n          // For the native GeneratorFunction constructor, the best we can\n          // do is to check its .name property.\n          (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n        : false;\n    };\n\n    exports.mark = function(genFun) {\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n      } else {\n        genFun.__proto__ = GeneratorFunctionPrototype;\n        if (!(toStringTagSymbol in genFun)) {\n          genFun[toStringTagSymbol] = \"GeneratorFunction\";\n        }\n      }\n      genFun.prototype = Object.create(Gp);\n      return genFun;\n    };\n\n    // Within the body of any async function, `await x` is transformed to\n    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n    // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n    // meant to be awaited.\n    exports.awrap = function(arg) {\n      return { __await: arg };\n    };\n\n    function AsyncIterator(generator) {\n      function invoke(method, arg, resolve, reject) {\n        var record = tryCatch(generator[method], generator, arg);\n        if (record.type === \"throw\") {\n          reject(record.arg);\n        } else {\n          var result = record.arg;\n          var value = result.value;\n          if (value &&\n              typeof value === \"object\" &&\n              hasOwn.call(value, \"__await\")) {\n            return Promise.resolve(value.__await).then(function(value) {\n              invoke(\"next\", value, resolve, reject);\n            }, function(err) {\n              invoke(\"throw\", err, resolve, reject);\n            });\n          }\n\n          return Promise.resolve(value).then(function(unwrapped) {\n            // When a yielded Promise is resolved, its final value becomes\n            // the .value of the Promise<{value,done}> result for the\n            // current iteration.\n            result.value = unwrapped;\n            resolve(result);\n          }, function(error) {\n            // If a rejected Promise was yielded, throw the rejection back\n            // into the async generator function so it can be handled there.\n            return invoke(\"throw\", error, resolve, reject);\n          });\n        }\n      }\n\n      var previousPromise;\n\n      function enqueue(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new Promise(function(resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n\n        return previousPromise =\n          // If enqueue has been called before, then we want to wait until\n          // all previous Promises have been resolved before calling invoke,\n          // so that results are always delivered in the correct order. If\n          // enqueue has not been called before, then it is important to\n          // call invoke immediately, without waiting on a callback to fire,\n          // so that the async generator function has the opportunity to do\n          // any necessary setup in a predictable way. This predictability\n          // is why the Promise constructor synchronously invokes its\n          // executor callback, and why async functions synchronously\n          // execute code before the first await. Since we implement simple\n          // async functions in terms of async generators, it is especially\n          // important to get this right, even though it requires care.\n          previousPromise ? previousPromise.then(\n            callInvokeWithMethodAndArg,\n            // Avoid propagating failures to Promises returned by later\n            // invocations of the iterator.\n            callInvokeWithMethodAndArg\n          ) : callInvokeWithMethodAndArg();\n      }\n\n      // Define the unified helper method that is used to implement .next,\n      // .throw, and .return (see defineIteratorMethods).\n      this._invoke = enqueue;\n    }\n\n    defineIteratorMethods(AsyncIterator.prototype);\n    AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n      return this;\n    };\n    exports.AsyncIterator = AsyncIterator;\n\n    // Note that simple async functions are implemented on top of\n    // AsyncIterator objects; they just return a Promise for the value of\n    // the final result produced by the iterator.\n    exports.async = function(innerFn, outerFn, self, tryLocsList) {\n      var iter = new AsyncIterator(\n        wrap(innerFn, outerFn, self, tryLocsList)\n      );\n\n      return exports.isGeneratorFunction(outerFn)\n        ? iter // If outerFn is a generator, return the full iterator.\n        : iter.next().then(function(result) {\n            return result.done ? result.value : iter.next();\n          });\n    };\n\n    function makeInvokeMethod(innerFn, self, context) {\n      var state = GenStateSuspendedStart;\n\n      return function invoke(method, arg) {\n        if (state === GenStateExecuting) {\n          throw new Error(\"Generator is already running\");\n        }\n\n        if (state === GenStateCompleted) {\n          if (method === \"throw\") {\n            throw arg;\n          }\n\n          // Be forgiving, per 25.3.3.3.3 of the spec:\n          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n          return doneResult();\n        }\n\n        context.method = method;\n        context.arg = arg;\n\n        while (true) {\n          var delegate = context.delegate;\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (context.method === \"next\") {\n            // Setting context._sent for legacy support of Babel's\n            // function.sent implementation.\n            context.sent = context._sent = context.arg;\n\n          } else if (context.method === \"throw\") {\n            if (state === GenStateSuspendedStart) {\n              state = GenStateCompleted;\n              throw context.arg;\n            }\n\n            context.dispatchException(context.arg);\n\n          } else if (context.method === \"return\") {\n            context.abrupt(\"return\", context.arg);\n          }\n\n          state = GenStateExecuting;\n\n          var record = tryCatch(innerFn, self, context);\n          if (record.type === \"normal\") {\n            // If an exception is thrown from innerFn, we leave state ===\n            // GenStateExecuting and loop back for another invocation.\n            state = context.done\n              ? GenStateCompleted\n              : GenStateSuspendedYield;\n\n            if (record.arg === ContinueSentinel) {\n              continue;\n            }\n\n            return {\n              value: record.arg,\n              done: context.done\n            };\n\n          } else if (record.type === \"throw\") {\n            state = GenStateCompleted;\n            // Dispatch the exception by looping back around to the\n            // context.dispatchException(context.arg) call above.\n            context.method = \"throw\";\n            context.arg = record.arg;\n          }\n        }\n      };\n    }\n\n    // Call delegate.iterator[context.method](context.arg) and handle the\n    // result, either by returning a { value, done } result from the\n    // delegate iterator, or by modifying context.method and context.arg,\n    // setting context.delegate to null, and returning the ContinueSentinel.\n    function maybeInvokeDelegate(delegate, context) {\n      var method = delegate.iterator[context.method];\n      if (method === undefined$1) {\n        // A .throw or .return when the delegate iterator has no .throw\n        // method always terminates the yield* loop.\n        context.delegate = null;\n\n        if (context.method === \"throw\") {\n          // Note: [\"return\"] must be used for ES3 parsing compatibility.\n          if (delegate.iterator[\"return\"]) {\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            context.method = \"return\";\n            context.arg = undefined$1;\n            maybeInvokeDelegate(delegate, context);\n\n            if (context.method === \"throw\") {\n              // If maybeInvokeDelegate(context) changed context.method from\n              // \"return\" to \"throw\", let that override the TypeError below.\n              return ContinueSentinel;\n            }\n          }\n\n          context.method = \"throw\";\n          context.arg = new TypeError(\n            \"The iterator does not provide a 'throw' method\");\n        }\n\n        return ContinueSentinel;\n      }\n\n      var record = tryCatch(method, delegate.iterator, context.arg);\n\n      if (record.type === \"throw\") {\n        context.method = \"throw\";\n        context.arg = record.arg;\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      var info = record.arg;\n\n      if (! info) {\n        context.method = \"throw\";\n        context.arg = new TypeError(\"iterator result is not an object\");\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      if (info.done) {\n        // Assign the result of the finished delegate to the temporary\n        // variable specified by delegate.resultName (see delegateYield).\n        context[delegate.resultName] = info.value;\n\n        // Resume execution at the desired location (see delegateYield).\n        context.next = delegate.nextLoc;\n\n        // If context.method was \"throw\" but the delegate handled the\n        // exception, let the outer generator proceed normally. If\n        // context.method was \"next\", forget context.arg since it has been\n        // \"consumed\" by the delegate iterator. If context.method was\n        // \"return\", allow the original .return call to continue in the\n        // outer generator.\n        if (context.method !== \"return\") {\n          context.method = \"next\";\n          context.arg = undefined$1;\n        }\n\n      } else {\n        // Re-yield the result returned by the delegate method.\n        return info;\n      }\n\n      // The delegate iterator is finished, so forget it and continue with\n      // the outer generator.\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    // Define Generator.prototype.{next,throw,return} in terms of the\n    // unified ._invoke helper method.\n    defineIteratorMethods(Gp);\n\n    Gp[toStringTagSymbol] = \"Generator\";\n\n    // A Generator should always return itself as the iterator object when the\n    // @@iterator function is called on it. Some browsers' implementations of the\n    // iterator prototype chain incorrectly implement this, causing the Generator\n    // object to not be returned from this call. This ensures that doesn't happen.\n    // See https://github.com/facebook/regenerator/issues/274 for more details.\n    Gp[iteratorSymbol] = function() {\n      return this;\n    };\n\n    Gp.toString = function() {\n      return \"[object Generator]\";\n    };\n\n    function pushTryEntry(locs) {\n      var entry = { tryLoc: locs[0] };\n\n      if (1 in locs) {\n        entry.catchLoc = locs[1];\n      }\n\n      if (2 in locs) {\n        entry.finallyLoc = locs[2];\n        entry.afterLoc = locs[3];\n      }\n\n      this.tryEntries.push(entry);\n    }\n\n    function resetTryEntry(entry) {\n      var record = entry.completion || {};\n      record.type = \"normal\";\n      delete record.arg;\n      entry.completion = record;\n    }\n\n    function Context(tryLocsList) {\n      // The root entry object (effectively a try statement without a catch\n      // or a finally block) gives us a place to store values thrown from\n      // locations where there is no enclosing try statement.\n      this.tryEntries = [{ tryLoc: \"root\" }];\n      tryLocsList.forEach(pushTryEntry, this);\n      this.reset(true);\n    }\n\n    exports.keys = function(object) {\n      var keys = [];\n      for (var key in object) {\n        keys.push(key);\n      }\n      keys.reverse();\n\n      // Rather than returning an object with a next method, we keep\n      // things simple and return the next function itself.\n      return function next() {\n        while (keys.length) {\n          var key = keys.pop();\n          if (key in object) {\n            next.value = key;\n            next.done = false;\n            return next;\n          }\n        }\n\n        // To avoid creating an additional object, we just hang the .value\n        // and .done properties off the next function object itself. This\n        // also ensures that the minifier will not anonymize the function.\n        next.done = true;\n        return next;\n      };\n    };\n\n    function values(iterable) {\n      if (iterable) {\n        var iteratorMethod = iterable[iteratorSymbol];\n        if (iteratorMethod) {\n          return iteratorMethod.call(iterable);\n        }\n\n        if (typeof iterable.next === \"function\") {\n          return iterable;\n        }\n\n        if (!isNaN(iterable.length)) {\n          var i = -1, next = function next() {\n            while (++i < iterable.length) {\n              if (hasOwn.call(iterable, i)) {\n                next.value = iterable[i];\n                next.done = false;\n                return next;\n              }\n            }\n\n            next.value = undefined$1;\n            next.done = true;\n\n            return next;\n          };\n\n          return next.next = next;\n        }\n      }\n\n      // Return an iterator with no values.\n      return { next: doneResult };\n    }\n    exports.values = values;\n\n    function doneResult() {\n      return { value: undefined$1, done: true };\n    }\n\n    Context.prototype = {\n      constructor: Context,\n\n      reset: function(skipTempReset) {\n        this.prev = 0;\n        this.next = 0;\n        // Resetting context._sent for legacy support of Babel's\n        // function.sent implementation.\n        this.sent = this._sent = undefined$1;\n        this.done = false;\n        this.delegate = null;\n\n        this.method = \"next\";\n        this.arg = undefined$1;\n\n        this.tryEntries.forEach(resetTryEntry);\n\n        if (!skipTempReset) {\n          for (var name in this) {\n            // Not sure about the optimal order of these conditions:\n            if (name.charAt(0) === \"t\" &&\n                hasOwn.call(this, name) &&\n                !isNaN(+name.slice(1))) {\n              this[name] = undefined$1;\n            }\n          }\n        }\n      },\n\n      stop: function() {\n        this.done = true;\n\n        var rootEntry = this.tryEntries[0];\n        var rootRecord = rootEntry.completion;\n        if (rootRecord.type === \"throw\") {\n          throw rootRecord.arg;\n        }\n\n        return this.rval;\n      },\n\n      dispatchException: function(exception) {\n        if (this.done) {\n          throw exception;\n        }\n\n        var context = this;\n        function handle(loc, caught) {\n          record.type = \"throw\";\n          record.arg = exception;\n          context.next = loc;\n\n          if (caught) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            context.method = \"next\";\n            context.arg = undefined$1;\n          }\n\n          return !! caught;\n        }\n\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          var record = entry.completion;\n\n          if (entry.tryLoc === \"root\") {\n            // Exception thrown outside of any try block that could handle\n            // it, so set the completion value of the entire function to\n            // throw the exception.\n            return handle(\"end\");\n          }\n\n          if (entry.tryLoc <= this.prev) {\n            var hasCatch = hasOwn.call(entry, \"catchLoc\");\n            var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n            if (hasCatch && hasFinally) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              } else if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n\n            } else if (hasCatch) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              }\n\n            } else if (hasFinally) {\n              if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n\n            } else {\n              throw new Error(\"try statement without catch or finally\");\n            }\n          }\n        }\n      },\n\n      abrupt: function(type, arg) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          if (entry.tryLoc <= this.prev &&\n              hasOwn.call(entry, \"finallyLoc\") &&\n              this.prev < entry.finallyLoc) {\n            var finallyEntry = entry;\n            break;\n          }\n        }\n\n        if (finallyEntry &&\n            (type === \"break\" ||\n             type === \"continue\") &&\n            finallyEntry.tryLoc <= arg &&\n            arg <= finallyEntry.finallyLoc) {\n          // Ignore the finally entry if control is not jumping to a\n          // location outside the try/catch block.\n          finallyEntry = null;\n        }\n\n        var record = finallyEntry ? finallyEntry.completion : {};\n        record.type = type;\n        record.arg = arg;\n\n        if (finallyEntry) {\n          this.method = \"next\";\n          this.next = finallyEntry.finallyLoc;\n          return ContinueSentinel;\n        }\n\n        return this.complete(record);\n      },\n\n      complete: function(record, afterLoc) {\n        if (record.type === \"throw\") {\n          throw record.arg;\n        }\n\n        if (record.type === \"break\" ||\n            record.type === \"continue\") {\n          this.next = record.arg;\n        } else if (record.type === \"return\") {\n          this.rval = this.arg = record.arg;\n          this.method = \"return\";\n          this.next = \"end\";\n        } else if (record.type === \"normal\" && afterLoc) {\n          this.next = afterLoc;\n        }\n\n        return ContinueSentinel;\n      },\n\n      finish: function(finallyLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          if (entry.finallyLoc === finallyLoc) {\n            this.complete(entry.completion, entry.afterLoc);\n            resetTryEntry(entry);\n            return ContinueSentinel;\n          }\n        }\n      },\n\n      \"catch\": function(tryLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          if (entry.tryLoc === tryLoc) {\n            var record = entry.completion;\n            if (record.type === \"throw\") {\n              var thrown = record.arg;\n              resetTryEntry(entry);\n            }\n            return thrown;\n          }\n        }\n\n        // The context.catch method must only be called with a location\n        // argument that corresponds to a known catch block.\n        throw new Error(\"illegal catch attempt\");\n      },\n\n      delegateYield: function(iterable, resultName, nextLoc) {\n        this.delegate = {\n          iterator: values(iterable),\n          resultName: resultName,\n          nextLoc: nextLoc\n        };\n\n        if (this.method === \"next\") {\n          // Deliberately forget the last sent value so that we don't\n          // accidentally pass it on to the delegate.\n          this.arg = undefined$1;\n        }\n\n        return ContinueSentinel;\n      }\n    };\n\n    // Regardless of whether this script is executing as a CommonJS module\n    // or not, return the runtime object so that we can declare the variable\n    // regeneratorRuntime in the outer scope, which allows this module to be\n    // injected easily by `bin/regenerator --include-runtime script.js`.\n    return exports;\n\n  }(\n    // If this script is executing as a CommonJS module, use module.exports\n    // as the regeneratorRuntime namespace. Otherwise create a new empty\n    // object. Either way, the resulting object will be used to initialize\n    // the regeneratorRuntime variable at the top of this file.\n     module.exports \n  ));\n\n  try {\n    regeneratorRuntime = runtime;\n  } catch (accidentalStrictMode) {\n    // This module should not be running in strict mode, so the above\n    // assignment should always work unless something is misconfigured. Just\n    // in case runtime.js accidentally runs in strict mode, we can escape\n    // strict mode using a global Function call. This could conceivably fail\n    // if a Content Security Policy forbids using Function, but in that case\n    // the proper solution is to fix the accidental strict mode problem. If\n    // you've misconfigured your bundler to force strict mode and applied a\n    // CSP to forbid Function, and you're not willing to fix either of those\n    // problems, please detail your unique predicament in a GitHub issue.\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n  });\n\n  var regenerator = runtime_1;\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n      var info = gen[key](arg);\n      var value = info.value;\n    } catch (error) {\n      reject(error);\n      return;\n    }\n\n    if (info.done) {\n      resolve(value);\n    } else {\n      Promise.resolve(value).then(_next, _throw);\n    }\n  }\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var self = this,\n          args = arguments;\n      return new Promise(function (resolve, reject) {\n        var gen = fn.apply(self, args);\n\n        function _next(value) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n        }\n\n        function _throw(err) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n        }\n\n        _next(undefined);\n      });\n    };\n  }\n\n  var asyncToGenerator = _asyncToGenerator;\n\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0;\n\n  /** `Object#toString` result references. */\n  var symbolTag = '[object Symbol]';\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source);\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\",\n    '&#96;': '`'\n  };\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /** Used for built-in method references. */\n  var objectProto = Object.prototype;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString = objectProto.toString;\n\n  /** Built-in value references. */\n  var Symbol$1 = root.Symbol;\n\n  /** Used to convert symbols to primitives and strings. */\n  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,\n      symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n  /**\n   * The base implementation of `_.toString` which doesn't convert nullish\n   * values to empty strings.\n   *\n   * @private\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   */\n  function baseToString(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == 'string') {\n      return value;\n    }\n    if (isSymbol(value)) {\n      return symbolToString ? symbolToString.call(value) : '';\n    }\n    var result = (value + '');\n    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n  function isSymbol(value) {\n    return typeof value == 'symbol' ||\n      (isObjectLike(value) && objectToString.call(value) == symbolTag);\n  }\n\n  /**\n   * Converts `value` to a string. An empty string is returned for `null`\n   * and `undefined` values. The sign of `-0` is preserved.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   * @example\n   *\n   * _.toString(null);\n   * // => ''\n   *\n   * _.toString(-0);\n   * // => '-0'\n   *\n   * _.toString([1, 2, 3]);\n   * // => '1,2,3'\n   */\n  function toString(value) {\n    return value == null ? '' : baseToString(value);\n  }\n\n  /**\n   * The inverse of `_.escape`; this method converts the HTML entities\n   * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to\n   * their corresponding characters.\n   *\n   * **Note:** No other HTML entities are unescaped. To unescape additional\n   * HTML entities use a third-party library like [_he_](https://mths.be/he).\n   *\n   * @static\n   * @memberOf _\n   * @since 0.6.0\n   * @category String\n   * @param {string} [string=''] The string to unescape.\n   * @returns {string} Returns the unescaped string.\n   * @example\n   *\n   * _.unescape('fred, barney, &amp; pebbles');\n   * // => 'fred, barney, & pebbles'\n   */\n  function unescape(string) {\n    string = toString(string);\n    return (string && reHasEscapedHtml.test(string))\n      ? string.replace(reEscapedHtml, unescapeHtmlChar)\n      : string;\n  }\n\n  var lodash_unescape = unescape;\n\n  var TOKEN_ESCAPED_OCTO = \"__TOKEN_ESCAPED_BACKSLASH_OCTO__\";\n  var BLOCK_DIRECTIVE = /^###@([\\S]+)([\\s\\S]*?)###/gm;\n  var INLINE_DIRECTIVE = /^#@([\\S]+)(.*)/g;\n\n  var extractDirectives = function extractDirectives(s) {\n    var directives = []; // avoid sluring escaped items\n\n    s = s.replace(\"\\\\#\", TOKEN_ESCAPED_OCTO);\n    s.replace(BLOCK_DIRECTIVE, function (match, dir, content) {\n      directives.push({\n        name: \"@\".concat(dir),\n        content: content.trim()\n      });\n      return \"\";\n    });\n    s.replace(INLINE_DIRECTIVE, function (match, dir, content) {\n      directives.push({\n        name: \"@\".concat(dir),\n        content: content.trim()\n      });\n      return \"\";\n    });\n    return directives;\n  };\n\n  var IS_EXTERNAL_URL = /^\\w+:\\/\\/\\/?\\w/i;\n  var LINK_PATTERN = /\\[\\[(.*?)\\]\\]/g;\n\n  var extractLinks = function extractLinks(str) {\n    var links = [];\n    var updated = str.replace(LINK_PATTERN, function (match, t) {\n      var display = t;\n      var target = t; // display|target format\n\n      var barIndex = t.indexOf(\"|\");\n      var rightArrIndex = t.indexOf(\"->\");\n      var leftArrIndex = t.indexOf(\"<-\");\n\n      switch (true) {\n        case barIndex >= 0:\n          display = t.substr(0, barIndex);\n          target = t.substr(barIndex + 1);\n          break;\n\n        case rightArrIndex >= 0:\n          display = t.substr(0, rightArrIndex);\n          target = t.substr(rightArrIndex + 2);\n          break;\n\n        case leftArrIndex >= 0:\n          display = t.substr(leftArrIndex + 2);\n          target = t.substr(0, leftArrIndex);\n          break;\n      } // render an external link & stop?\n\n\n      if (IS_EXTERNAL_URL.test(target)) {\n        return '<a href=\"' + target + '\" target=\"_blank\">' + display + \"</a>\";\n      }\n\n      links.push({\n        display: display,\n        target: target\n      });\n      return \"\"; // render nothing if it's a twee link\n    });\n    return {\n      links: links,\n      updated: updated,\n      original: str\n    };\n  };\n\n  var TOKEN_ESCAPED_OCTO$1 = \"__TOKEN_ESCAPED_BACKSLASH_OCTO__\";\n  var BLOCK_COMMENT = /###[\\s\\S]*?###/gm;\n  var INLINE_COMMENT = /^#.*$/g;\n\n  var stripComments = function stripComments(str) {\n    return str.replace(\"\\\\#\", TOKEN_ESCAPED_OCTO$1).replace(BLOCK_COMMENT, \"\").replace(INLINE_COMMENT, \"\").replace(TOKEN_ESCAPED_OCTO$1, \"#\").trim();\n  };\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var findStory = function findStory(win) {\n    if (win && win.story) {\n      return win.story;\n    }\n\n    return {\n      state: {}\n    };\n  };\n\n  var renderPassage = function renderPassage(passage) {\n    var source = passage.source;\n    var directives = extractDirectives(source);\n    var result = stripComments(source);\n\n    if (passage) {\n      // remove links if set previously\n      passage.links = [];\n    } // [[links]]\n\n\n    var linkData = extractLinks(result);\n    result = linkData.updated;\n\n    if (passage) {\n      passage.links = linkData.links;\n    } // before handling any tags, handle any/all directives\n\n\n    directives.forEach(function (d) {\n      if (!passage.story.directives[d.name]) return;\n      passage.story.directives[d.name].forEach(function (run) {\n        result = run(d.content, result, passage, passage.story);\n      });\n    }); // if system tag, return an empty render set\n\n    if (passage.hasTag(\"system\")) {\n      return [];\n    } // if prompt tag is set, notify the story\n\n\n    if (passage) {\n      var prompts = passage.prefixTag(\"prompt\");\n\n      if (prompts.length) {\n        passage.story.prompt(prompts[0]);\n      }\n    } // if this is a multiline item, trim, split, and mark each item\n    // return the array\n\n\n    if (passage.hasTag(\"multiline\")) {\n      result = result.trim();\n      return result.split(/[\\r\\n]+/g);\n    } // else returns an array of 1\n\n\n    return [result];\n  };\n\n  var Passage = function Passage(id, name, tags, source, story) {\n    var _this = this;\n\n    classCallCheck(this, Passage);\n\n    defineProperty(this, \"id\", null);\n\n    defineProperty(this, \"name\", null);\n\n    defineProperty(this, \"tags\", null);\n\n    defineProperty(this, \"tagDict\", {});\n\n    defineProperty(this, \"source\", null);\n\n    defineProperty(this, \"links\", []);\n\n    defineProperty(this, \"getSpeaker\", function () {\n      var speakerTag = _this.tags.find(function (t) {\n        return t.indexOf(\"speaker-\") === 0;\n      }) || \"\";\n\n      var systemTag = _this.hasTag(\"system\");\n\n      if (speakerTag) return speakerTag.replace(/^speaker-/, \"\");\n      if (systemTag) return \"system\";\n      return null;\n    });\n\n    defineProperty(this, \"prefixTag\", function (pfx, asDict) {\n      return _this.tags.filter(function (t) {\n        return t.indexOf(\"\".concat(pfx, \"-\")) === 0;\n      }).map(function (t) {\n        return t.replace(\"\".concat(pfx, \"-\"), \"\");\n      }).reduce(function (a, t) {\n        if (asDict) return _objectSpread({}, a, defineProperty({}, t, 1));\n        return [].concat(toConsumableArray(a), [t]);\n      }, asDict ? {} : []);\n    });\n\n    defineProperty(this, \"hasTag\", function (t) {\n      return _this.tagDict[t];\n    });\n\n    defineProperty(this, \"render\", function () {\n      return renderPassage(_this);\n    });\n\n    this.id = id;\n    this.name = name;\n    this.tags = tags;\n    this.source = lodash_unescape(source);\n    this.story = story;\n    this.tags.forEach(function (t) {\n      return _this.tagDict[t] = 1;\n    });\n  };\n\n  defineProperty(Passage, \"render\", function (str) {\n    return renderPassage(new Passage(null, null, null, str, findStory(window || null)));\n  });\n\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY$1 = 1 / 0;\n\n  /** `Object#toString` result references. */\n  var symbolTag$1 = '[object Symbol]';\n\n  /** Used to match HTML entities and HTML characters. */\n  var reUnescapedHtml = /[&<>\"'`]/g,\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '`': '&#96;'\n  };\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n  /** Detect free variable `self`. */\n  var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root$1 = freeGlobal$1 || freeSelf$1 || Function('return this')();\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf$1(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf$1(htmlEscapes);\n\n  /** Used for built-in method references. */\n  var objectProto$1 = Object.prototype;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString$1 = objectProto$1.toString;\n\n  /** Built-in value references. */\n  var Symbol$2 = root$1.Symbol;\n\n  /** Used to convert symbols to primitives and strings. */\n  var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,\n      symbolToString$1 = symbolProto$1 ? symbolProto$1.toString : undefined;\n\n  /**\n   * The base implementation of `_.toString` which doesn't convert nullish\n   * values to empty strings.\n   *\n   * @private\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   */\n  function baseToString$1(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == 'string') {\n      return value;\n    }\n    if (isSymbol$1(value)) {\n      return symbolToString$1 ? symbolToString$1.call(value) : '';\n    }\n    var result = (value + '');\n    return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike$1(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n  function isSymbol$1(value) {\n    return typeof value == 'symbol' ||\n      (isObjectLike$1(value) && objectToString$1.call(value) == symbolTag$1);\n  }\n\n  /**\n   * Converts `value` to a string. An empty string is returned for `null`\n   * and `undefined` values. The sign of `-0` is preserved.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   * @example\n   *\n   * _.toString(null);\n   * // => ''\n   *\n   * _.toString(-0);\n   * // => '-0'\n   *\n   * _.toString([1, 2, 3]);\n   * // => '1,2,3'\n   */\n  function toString$1(value) {\n    return value == null ? '' : baseToString$1(value);\n  }\n\n  /**\n   * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\" in `string` to\n   * their corresponding HTML entities.\n   *\n   * **Note:** No other characters are escaped. To escape additional\n   * characters use a third-party library like [_he_](https://mths.be/he).\n   *\n   * Though the \">\" character is escaped for symmetry, characters like\n   * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n   * unless they're part of a tag or unquoted attribute value. See\n   * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n   * (under \"semi-related fun fact\") for more details.\n   *\n   * Backticks are escaped because in IE < 9, they can break out of\n   * attribute values or HTML comments. See [#59](https://html5sec.org/#59),\n   * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and\n   * [#133](https://html5sec.org/#133) of the\n   * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.\n   *\n   * When working with HTML you should always\n   * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n   * XSS vectors.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category String\n   * @param {string} [string=''] The string to escape.\n   * @returns {string} Returns the escaped string.\n   * @example\n   *\n   * _.escape('fred, barney, & pebbles');\n   * // => 'fred, barney, &amp; pebbles'\n   */\n  function escape(string) {\n    string = toString$1(string);\n    return (string && reHasUnescapedHtml.test(string))\n      ? string.replace(reUnescapedHtml, escapeHtmlChar)\n      : string;\n  }\n\n  var lodash_escape = escape;\n\n  var selectPassages = \"tw-passagedata\";\n  var selectCss = '*[type=\"text/twine-css\"]';\n  var selectJs = '*[type=\"text/twine-javascript\"]';\n  var selectActiveLink = \"#user-response-panel a[data-passage]\";\n  var selectActiveButton = \"#user-response-panel button[data-passage]\";\n  var selectActiveInput = \"#user-response-panel input\";\n  var selectActive = \".chat-panel .active\";\n  var selectHistory = \".chat-panel .history\";\n  var selectResponses = \"#user-response-panel\";\n  var typingIndicator = \"#animation-container\";\n  var IS_NUMERIC = /^[\\d]+$/;\n  /**\n   * Determine if a provided string contains only numbers\n   * In the case of `pid` values for passages, this is true\n   */\n\n  var isNumeric = function isNumeric(d) {\n    return IS_NUMERIC.test(d);\n  };\n  /**\n   * Format a user passage (such as a response)\n   */\n\n\n  var USER_PASSAGE_TMPL = function USER_PASSAGE_TMPL(_ref) {\n    var id = _ref.id,\n        text = _ref.text;\n    return \"\\n  <div class=\\\"chat-passage-wrapper\\\" data-speaker=\\\"you\\\">\\n    <div class=\\\"chat-passage phistory\\\" data-speaker=\\\"you\\\" data-upassage=\\\"\".concat(id, \"\\\">\\n      \").concat(text, \"\\n    </div>\\n  </div>\\n\");\n  };\n  /**\n   * Format a message from a non-user\n   */\n\n\n  var OTHER_PASSAGE_TMPL = function OTHER_PASSAGE_TMPL(_ref2) {\n    var speaker = _ref2.speaker,\n        tags = _ref2.tags,\n        text = _ref2.text;\n    return \"\\n  <div data-speaker=\\\"\".concat(speaker, \"\\\" class=\\\"chat-passage-wrapper \").concat(tags.join(\" \"), \"\\\">\\n    <div data-speaker=\\\"\").concat(speaker, \"\\\" class=\\\"chat-passage\\\">\\n      \").concat(text, \"\\n    </div>\\n  </div>\\n\");\n  };\n  /**\n   * Forces a delay via promises in order to spread out messages\n   */\n\n\n  var delay =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = asyncToGenerator(\n    /*#__PURE__*/\n    regenerator.mark(function _callee() {\n      var t,\n          _args = arguments;\n      return regenerator.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              t = _args.length > 0 && _args[0] !== undefined ? _args[0] : 0;\n              return _context.abrupt(\"return\", new Promise(function (resolve) {\n                return setTimeout(resolve, t);\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function delay() {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // Find one/many nodes within a context. We [...findAll] to ensure we're cast as an array\n  // not as a node list\n\n\n  var find = function find(ctx, s) {\n    return ctx.querySelector(s);\n  };\n\n  var findAll = function findAll(ctx, s) {\n    return toConsumableArray(ctx.querySelectorAll(s)) || [];\n  };\n  /**\n   * Standard Twine Format Story Object\n   */\n\n\n  var Story = // Twine v2\n  function Story(win, src) {\n    var _this = this;\n\n    classCallCheck(this, Story);\n\n    defineProperty(this, \"version\", 2);\n\n    defineProperty(this, \"document\", null);\n\n    defineProperty(this, \"story\", null);\n\n    defineProperty(this, \"name\", \"\");\n\n    defineProperty(this, \"startsAt\", 0);\n\n    defineProperty(this, \"current\", 0);\n\n    defineProperty(this, \"history\", []);\n\n    defineProperty(this, \"passages\", {});\n\n    defineProperty(this, \"showPrompt\", false);\n\n    defineProperty(this, \"errorMessage\", \"\\u26A0 %s\");\n\n    defineProperty(this, \"directives\", {});\n\n    defineProperty(this, \"elements\", {});\n\n    defineProperty(this, \"userScripts\", []);\n\n    defineProperty(this, \"userStyles\", []);\n\n    defineProperty(this, \"start\", function () {\n      // activate userscripts and styles\n      _this.userStyles.forEach(function (s) {\n        var t = _this.document.createElement(\"style\");\n\n        t.innerHTML = s;\n\n        _this.document.body.appendChild(t);\n      });\n\n      _this.userScripts.forEach(function (s) {\n        // eval is evil, but this is simply how Twine works\n        // eslint-disable-line\n        globalEval(s);\n      }); // when you click on a[data-passage] (response link)...\n\n\n      _this.document.body.addEventListener(\"click\", function (e) {\n        if (!e.target.matches(selectActiveLink)) {\n          return;\n        }\n\n        _this.advance(_this.findPassage(e.target.getAttribute(\"data-passage\")), e.target.innerHTML);\n      }); // when you click on button[data-passage] (response input)...\n\n\n      _this.document.body.addEventListener(\"click\", function (e) {\n        if (!e.target.matches(selectActiveButton)) {\n          return;\n        } // capture and disable showPrompt feature\n\n\n        var value = find(_this.document, selectActiveInput).value;\n        _this.showPrompt = false;\n\n        _this.advance(_this.findPassage(e.target.getAttribute(\"data-passage\")), value);\n      });\n\n      _this.advance(_this.findPassage(_this.startsAt));\n    });\n\n    defineProperty(this, \"findPassage\", function (idOrName) {\n      if (isNumeric(idOrName)) {\n        return _this.passages[idOrName];\n      } else {\n        // handle passages with ' and \" (can't use a css selector consistently)\n        var p = findAll(_this.story, \"tw-passagedata\").filter(function (p) {\n          return p.getAttribute(\"name\") === idOrName;\n        })[0];\n        if (!p) return null;\n        return _this.passages[p.getAttribute(\"pid\")];\n      }\n    });\n\n    defineProperty(this, \"advance\",\n    /*#__PURE__*/\n    function () {\n      var _ref4 = asyncToGenerator(\n      /*#__PURE__*/\n      regenerator.mark(function _callee2(passage) {\n        var userText,\n            last,\n            existing,\n            _args2 = arguments;\n        return regenerator.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                userText = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : null;\n\n                _this.history.push(passage.id);\n\n                last = _this.current; // .active is captured & cleared\n\n                existing = _this.elements.active.innerHTML;\n                _this.elements.active.innerHTML = \"\"; // whatever was in active is moved up into history\n\n                _this.elements.history.innerHTML += existing; // if there is userText, it is added to .history\n\n                if (userText) {\n                  _this.renderUserMessage(last, userText, function (s) {\n                    return _this.elements.history.innerHTML += s;\n                  });\n                } // The new passage is rendered and placed in .active\n                // after all renders, user options are displayed\n\n\n                _context2.next = 9;\n                return _this.renderPassage(passage, function (s) {\n                  return _this.elements.active.innerHTML += s;\n                });\n\n              case 9:\n                if (!passage.hasTag(\"auto\")) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                // auto advance if the auto tag is set, skipping anything that\n                // could pause our operation\n                _this.advance(_this.findPassage(passage.links[0].target));\n\n                return _context2.abrupt(\"return\");\n\n              case 12:\n                // if prompt is set from the current node, enable freetext\n                if (_this.showPrompt) {\n                  _this.renderTextInput(passage);\n                } else {\n                  _this.renderChoices(passage);\n                }\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    defineProperty(this, \"renderUserMessage\",\n    /*#__PURE__*/\n    function () {\n      var _ref5 = asyncToGenerator(\n      /*#__PURE__*/\n      regenerator.mark(function _callee3(pid, text, renderer) {\n        return regenerator.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return renderer(USER_PASSAGE_TMPL({\n                  pid: pid,\n                  text: text\n                }));\n\n              case 2:\n                _this.scrollToBottom();\n\n                return _context3.abrupt(\"return\", Promise.resolve());\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2, _x3, _x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    defineProperty(this, \"renderPassage\",\n    /*#__PURE__*/\n    function () {\n      var _ref6 = asyncToGenerator(\n      /*#__PURE__*/\n      regenerator.mark(function _callee4(passage, renderer) {\n        var speaker, statements, next, content;\n        return regenerator.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                speaker = passage.getSpeaker();\n                statements = passage.render();\n                next = statements.shift();\n\n                _this.showTyping();\n\n              case 4:\n                if (!next) {\n                  _context4.next = 13;\n                  break;\n                }\n\n                content = OTHER_PASSAGE_TMPL({\n                  speaker: speaker,\n                  tags: passage.tags,\n                  text: next\n                });\n                _context4.next = 8;\n                return delay(_this.calculateDelay(next));\n\n              case 8:\n                _context4.next = 10;\n                return renderer(content);\n\n              case 10:\n                next = statements.shift();\n                _context4.next = 4;\n                break;\n\n              case 13:\n                _this.hideTyping();\n\n                _this.scrollToBottom();\n\n                return _context4.abrupt(\"return\", Promise.resolve());\n\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x5, _x6) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n\n    defineProperty(this, \"calculateDelay\", function (txt) {\n      var typingDelayRatio = 0.3;\n      var rate = 20; // ms\n\n      return txt.length * rate * typingDelayRatio;\n    });\n\n    defineProperty(this, \"showTyping\", function () {\n      find(_this.document, typingIndicator).style.visibility = \"visible\";\n    });\n\n    defineProperty(this, \"hideTyping\", function () {\n      find(_this.document, typingIndicator).style.visibility = \"hidden\";\n    });\n\n    defineProperty(this, \"scrollToBottom\", function () {\n      var hist = find(_this.document, \"#phistory\");\n      document.scrollingElement.scrollTop = hist.offsetHeight;\n    });\n\n    defineProperty(this, \"removeChoices\", function () {\n      var panel = find(_this.document, selectResponses);\n      panel.innerHTML = \"\";\n    });\n\n    defineProperty(this, \"renderChoices\", function (passage) {\n      _this.removeChoices();\n\n      var panel = find(_this.document, selectResponses);\n      passage.links.forEach(function (l) {\n        panel.innerHTML += \"<a href=\\\"javascript:void(0)\\\" class=\\\"user-response\\\" data-passage=\\\"\".concat(lodash_escape(l.target), \"\\\">\").concat(l.display, \"</a>\");\n      });\n    });\n\n    defineProperty(this, \"renderTextInput\", function (passage) {\n      _this.removeChoices();\n\n      var panel = find(_this.document, selectResponses);\n      panel.innerHTML = \"<input type=\\\"text\\\" id=\\\"user-input\\\" placeholder=\\\"\".concat(_this.showPrompt.placeholder, \"\\\" /><button data-passage=\\\"\").concat(lodash_escape(passage.links[0].target), \"\\\">&gt;</button>\");\n    });\n\n    defineProperty(this, \"prompt\", function (saveAs, placeholder) {\n      return _this.showPrompt = {\n        saveAs: saveAs,\n        placeholder: placeholder\n      };\n    });\n\n    defineProperty(this, \"directive\", function (id, cb) {\n      if (!_this.directives[id]) {\n        _this.directives[id] = [];\n      }\n\n      _this.directives[id].push(cb);\n    });\n\n    this.window = win;\n\n    if (src) {\n      this.document = document.implementation.createHTMLDocument(\"Chatbook Injected Content\");\n    } else {\n      this.document = document;\n    }\n\n    this.story = find(this.document, \"tw-storydata\"); // elements\n\n    this.elements = {\n      active: find(this.document, selectActive),\n      history: find(this.document, selectHistory)\n    }; // properties of story node\n\n    this.name = this.story.getAttribute(\"name\") || \"\";\n    this.startsAt = this.story.getAttribute(\"startnode\") || 0;\n    findAll(this.story, selectPassages).forEach(function (p) {\n      var id = parseInt(p.getAttribute(\"pid\"));\n      var name = p.getAttribute(\"name\");\n      var tags = (p.getAttribute(\"tags\") || \"\").split(/\\s+/g);\n      var passage = p.innerHTML || \"\";\n      _this.passages[id] = new Passage(id, name, tags, passage, _this);\n    });\n    find(this.document, \"title\").innerHTML = this.name;\n    find(this.document, \"#ptitle\").innerHTML = this.name;\n    this.userScripts = (findAll(this.document, selectJs) || []).map(function (el) {\n      return el.innerHTML;\n    });\n    this.userStyles = (findAll(this.document, selectCss) || []).map(function (el) {\n      return el.innerHTML;\n    });\n  }\n  /**\n   * Starts the story by setting up listeners and then advancing\n   * to the first item in the stack\n   */\n  ;\n\n  (function (win) {\n    if (typeof win !== \"undefined\") {\n      win.document.addEventListener(\"DOMContentLoaded\", function (event) {\n        window.globalEval = eval;\n        window.story = new Story(win);\n        window.story.start();\n      });\n    }\n  })(window || undefined);\n\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n</script>\n  </body>\n</html>\n"})